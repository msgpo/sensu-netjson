#!/usr/bin/env python

import os
import site
for python_path in os.environ.get("LD_LIBRARY_PATH", "").split(":"):
    site.addsitedir(python_path)

from sensu_plugin import SensuPluginCheck
import re
import requests
from netdiff import NetJsonParser, OlsrParser
import networkx as nx
from netaddr import IPAddress


class ParserOLSRv1JSONInfoPlugin():
    def parse(self, url):
        data = requests.get(url).json()
        graph = OlsrParser(data = data).graph
        graph = nx.relabel_nodes(graph, { node: IPAddress(node) for node in graph.nodes })
        return graph

class ParserOLSRv2NetJSONPlugin():
    def parse(self, url):
        data = requests.get("{url}/telnet/netjsoninfo%20graph".format(url = url)).json()["collection"][0]
        graph = NetJsonParser(data = data).graph
        graph = graph.subgraph([ y[0] for y in filter(lambda x: x[1]["type"] == "node", graph.nodes.items()) ])
        graph = nx.relabel_nodes(graph, { node: IPAddress(re.sub("^id_", "", node)) for node in graph.nodes })
        return graph

class NetJSONPath(SensuPluginCheck):
    def parsers():
        return {
            "olsrv1-jsoninfo-plugin": ParserOLSRv1JSONInfoPlugin(),
            "olsrv2-netjson-plugin": ParserOLSRv2NetJSONPlugin()
        }

    def setup(self):
        self.check_name("netjson_path")

        self.parser.add_argument("-u", "--url", required = True, help = "URL from where to fetch the data")
        self.parser.add_argument("-t", "--type", required = True, choices = NetJSONPath.parsers().keys(), help = "Type to parse from the URL")
        self.parser.add_argument("-p", "--path", required = True, help = "<IP>-<IP>-<IP>")

    def run(self):
        graph = NetJSONPath.parsers()[self.options.type].parse(self.options.url)

        path = [ IPAddress(x.strip()) for x in self.options.path.split("-") ]

        start_node = path[0]
        if not graph.has_node(start_node):
            self.critical("Missing start node: '%s'" % str(start_node))
            return

        stop_node = path[-1]
        if not graph.has_node(stop_node):
            self.critical("Missing stop node: '%s'" % str(stop_node))
            return

        shortest_path = nx.shortest_path(graph, start_node, stop_node)
        if path == shortest_path:
            self.ok("Shortest path matches '%s'" % " - ".join([ str(x) for x in path ]))
        else:
            self.critical("Shortest path '%s' does not match requested path '%s'" % (" - ".join([ str(x) for x in shortest_path ]), " - ".join([ str(x) for x in path ])))


NetJSONPath()
